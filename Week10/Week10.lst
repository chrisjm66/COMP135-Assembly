Microsoft (R) Macro Assembler Version 6.15.8803		    04/02/24 15:04:55
Week 10							     Page 1 - 1


				TITLE Week 10
				; Author: Chris Mangan
				; Date: 4-2-2024

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000  00000028 [			myBuffer BYTE 40 dup(0) ; reserves 40 spaces, ? can also be used
	    00
	   ]
					; note: 7 makes a chime
 00000028 07 45 6E 74 65		stringPrompt BYTE 7,"Enter a string:",0 ; the 0 is a null character which helps with the logic. the 0 tells writestring when to stop.
	   72 20 61 20 73
	   74 72 69 6E 67
	   3A 00
 00000039 45 6E 74 65 72		intPrompt BYTE "Enter an integer:",0
	   20 61 6E 20 69
	   6E 74 65 67 65
	   72 3A 00
 0000004B 00000000			val1 DWORD ?
 0000004F 00000000			val2 DWORD ?
 00000053 4E 75 6D 62 65		greaterString BYTE "Number 1 is greater than number 2",0
	   72 20 31 20 69
	   73 20 67 72 65
	   61 74 65 72 20
	   74 68 61 6E 20
	   6E 75 6D 62 65
	   72 20 32 00
 00000075 4E 75 6D 62 65		lessString BYTE "Number 1 is less than number 2",0
	   72 20 31 20 69
	   73 20 6C 65 73
	   73 20 74 68 61
	   6E 20 6E 75 6D
	   62 65 72 20 32
	   00
 00000094 4E 75 6D 62 65		equalString BYTE "Number 1 is equal to number 2",0
	   72 20 31 20 69
	   73 20 65 71 75
	   61 6C 20 74 6F
	   20 6E 75 6D 62
	   65 72 20 32 00
 000000B2 50 72 6F 63 65		endProcString BYTE "Procedure ended",0
	   64 75 72 65 20
	   65 6E 64 65 64
	   00
 000000C2 49 20 77 69 6C		infoString BYTE "I will now compare two numbers you give me",0
	   6C 20 6E 6F 77
	   20 63 6F 6D 70
	   61 72 65 20 74
	   77 6F 20 6E 75
	   6D 62 65 72 73
	   20 79 6F 75 20
	   67 69 76 65 20
	   6D 65 00
 00000000			.code

 00000000			main PROC
 00000000  E8 00000011			call getString
 00000005  E8 00000033			call addInts
					
 0000000A  E8 00000064			call compareInts
					exit
 00000016			main ENDP

 00000016			getString PROC uses eax ecx edx
					; this is how to print a string
 00000019  BA 00000028 R		mov edx, offset stringPrompt ; these two must be used together
 0000001E  E8 00000000 E		call writestring ; writes a string
 00000023  E8 00000000 E		call crlf ; write a line
					
					
 00000028  B9 00000028			mov ecx, 40 ; how many?
 0000002D  BA 00000000 R		mov edx, offset mybuffer ; where?
 00000032  E8 00000000 E		call readstring ; gets a string, num of characters are in eax and we can loop through that to add it to our buffer.
 00000037				stringLoop:
						;; todo 
 00000037  E2 FE			LOOP stringLoop
					
					ret
 0000003D			getString ENDP

 0000003D			addInts PROC uses eax ecx edx
 00000040  E8 0000001C			call writeIntPrompt
					
 00000045  E8 00000000 E		call readint ; moves value into eax
 0000004A  8B D8			mov ebx, eax
					
 0000004C  E8 00000010			call writeIntPrompt
					
 00000051  E8 00000000 E		call readint
 00000056  03 C3			add eax, ebx
 00000058  E8 00000000 E		call writeint
					ret
 00000061			addInts ENDP

 00000061			writeIntPrompt PROC uses edx
 00000062  BA 00000039 R		mov edx, offset intPrompt
 00000067  E8 00000000 E		call writestring
 0000006C  E8 00000000 E		call crlf
					
					ret
 00000073			writeIntPrompt ENDP

				; this is how to compare two numbers
 00000073			compareInts PROC uses eax edx
 00000075  E8 00000000 E		call crlf
 0000007A  BA 000000C2 R		mov edx, offset infoString
 0000007F  E8 00000000 E		call writeString
 00000084  E8 00000000 E		call crlf
					
 00000089  E8 00000045			call getInts ; see below, compares ints
 0000008E  A1 0000004B R		mov eax, val1 ; cannot do memory to memory comparison so we move this to eax
					
 00000093  3B 05 0000004F R		cmp eax, val2 ; think of this as the if then else; if eax > val2, jump to greater; if less than, jump to lessthan, else(if equal), jump to equal.
 00000099  7F 04			jg greater
 0000009B  7C 0E			jl less
 0000009D  74 18			je equal
					
 0000009F				greater:
 0000009F  BA 00000053 R			mov edx, offset greaterString
 000000A4  E8 00000000 E			call writeString
 000000A9  EB 16				jmp next ; so we don't run the next code segments
 000000AB				less:
 000000AB  BA 00000075 R			mov edx, offset lessString
 000000B0  E8 00000000 E			call writeString
 000000B5  EB 0A				jmp next
 000000B7				equal:
 000000B7  BA 00000094 R			mov edx, offset equalString
 000000BC  E8 00000000 E			call writeString
						; no jump needed here since it's sequential.
					
 000000C1				next:
 000000C1  E8 00000000 E			call crlf
 000000C6  BA 000000B2 R			mov edx, offset endProcString
 000000CB  E8 00000000 E			call writeString
					ret
 000000D3			compareInts ENDP

 000000D3			getInts PROC uses eax
 000000D4  E8 FFFFFF88			call writeIntPrompt
 000000D9  E8 00000000 E		call readInt
 000000DE  A3 0000004B R		mov val1, eax
					
 000000E3  E8 FFFFFF79			call writeIntPrompt
 000000E8  E8 00000000 E		call readInt
 000000ED  A3 0000004F R		mov val2, eax
					
					ret
 000000F4			getInts ENDP

				END main
Microsoft (R) Macro Assembler Version 6.15.8803		    04/02/24 15:04:55
Week 10							     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000005
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 Byte
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPos  . . . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  maxWinSize . . . . . . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000ED DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000F4 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ClrScr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
addInts  . . . . . . . . . . . .	P Near	 0000003D _TEXT	Length= 00000024 Public STDCALL
compareInts  . . . . . . . . . .	P Near	 00000073 _TEXT	Length= 00000060 Public STDCALL
  greater  . . . . . . . . . . .	L Near	 0000009F _TEXT	
  less . . . . . . . . . . . . .	L Near	 000000AB _TEXT	
  equal  . . . . . . . . . . . .	L Near	 000000B7 _TEXT	
  next . . . . . . . . . . . . .	L Near	 000000C1 _TEXT	
getInts  . . . . . . . . . . . .	P Near	 000000D3 _TEXT	Length= 00000021 Public STDCALL
getString  . . . . . . . . . . .	P Near	 00000016 _TEXT	Length= 00000027 Public STDCALL
  stringLoop . . . . . . . . . .	L Near	 00000037 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000016 Public STDCALL
writeIntPrompt . . . . . . . . .	P Near	 00000061 _TEXT	Length= 00000012 Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endProcString  . . . . . . . . .	Byte	 000000B2 _DATA	
equalString  . . . . . . . . . .	Byte	 00000094 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
greaterString  . . . . . . . . .	Byte	 00000053 _DATA	
green  . . . . . . . . . . . . .	Number	 00000002h   
infoString . . . . . . . . . . .	Byte	 000000C2 _DATA	
intPrompt  . . . . . . . . . . .	Byte	 00000039 _DATA	
lessString . . . . . . . . . . .	Byte	 00000075 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
myBuffer . . . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stringPrompt . . . . . . . . . .	Byte	 00000028 _DATA	
val1 . . . . . . . . . . . . . .	DWord	 0000004B _DATA	
val2 . . . . . . . . . . . . . .	DWord	 0000004F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
